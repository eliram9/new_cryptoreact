{"version":3,"sources":["components/CryptoCard.jsx","images/BTC.svg","images/ETH.svg","images/XLM.svg","images/XRP.svg","images/ETC.svg","images/BCH.svg","components/CryptoPrices.js","components/Footer.jsx","components/SearchBar.jsx","components/SearchResult.jsx","App.js","reportWebVitals.js","index.js"],"names":["CryptoCard","coins","className","map","coin","src","iconImage","alt","width","FROMSYMBOL","PRICE","toFixed","CurrentPrices","props","useState","currentPrices","setCurrentPrices","isLoading","setIsLoading","assets","setAssets","useEffect","getData","setInterval","a","currentCoinsData","URL","axios","get","getCurentData","btc","data","RAW","BTC","USD","eth","ETH","xrp","XRP","bch","BCH","xlm","XLM","etc","ETC","totalAssets","Math","floor","push","id","Footer","state","year","Date","this","timerID","setState","time","getFullYear","Component","SearchBar","searchCoin","searchInput","setSearchInput","onSubmit","evt","preventDefault","target","reset","handleSubmit","type","name","placeholder","onChange","value","toLowerCase","required","class","SearchResult","setCoin","notFound","setNotFound","getSearchedCoin","results","console","log","index","image","symbol","toUpperCase","current_price","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9f43a81.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CryptoCard.css';\n\nconst CryptoCard = ({ coins }) => {  \n\n    return (\n        <div className=\"mt-4\">\n            <div className=\"coin_list row mt-4\">\n                {coins.map(coin => (\n                    <div className=\"col-4 col-md-2 mt-3\" key={coin.FROMSYMBOL}>\n                        <img src={coin.iconImage} alt=\"image cap\" width=\"100px\" />\n                        <div className=\"align-bottom py-3\">\n                            <h5 className=\"coin_name\">{coin.FROMSYMBOL}</h5>\n                            <p className=\"coin_price\">${coin.PRICE.toFixed(2)}</p>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n \nexport default CryptoCard;\n\n","export default __webpack_public_path__ + \"static/media/BTC.ef7c2565.svg\";","export default __webpack_public_path__ + \"static/media/ETH.ec8d5f59.svg\";","export default __webpack_public_path__ + \"static/media/XLM.839200d7.svg\";","export default __webpack_public_path__ + \"static/media/XRP.c393186e.svg\";","export default __webpack_public_path__ + \"static/media/ETC.74a33129.svg\";","export default __webpack_public_path__ + \"static/media/BCH.bd7aac44.svg\";","import React, { useState, useEffect } from 'react';\n\nimport CryptoCard from './CryptoCard';\nimport axios from 'axios';\nimport './CryptoPrices.css';\n\n// Icons I want to display\nimport BTC from '../images/BTC.svg';\nimport ETH from '../images/ETH.svg';\nimport XLM from '../images/XLM.svg';\nimport XRP from '../images/XRP.svg';\nimport ETC from '../images/ETC.svg';\nimport BCH from '../images/BCH.svg';\n\n\nconst CurrentPrices = (props) => {\n    const [currentPrices, setCurrentPrices] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [assets, setAssets] = useState('');\n    let intervalConst;\n\n    useEffect(() => {\n        getData();\n        intervalConst = setInterval(() => {\n            getData()\n        }, 60000)\n    }, [])\n\n    const getData = async () => {\n        const currentCoinsData = [];\n        const API_KEY = '5f1669f9639c90e3b179bbd4e9569d83195316fd3252fdf9a54b0604120f1d1e'\n        const URL = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,XRP,BCH,XLM,ETC&tsyms=USD&api_key={${API_KEY}}`;\n        const getCurentData = await axios.get(URL);\n        let btc = getCurentData.data.RAW.BTC.USD;\n        let eth = getCurentData.data.RAW.ETH.USD;\n        let xrp = getCurentData.data.RAW.XRP.USD;\n        let bch = getCurentData.data.RAW.BCH.USD;\n        let xlm = getCurentData.data.RAW.XLM.USD;\n        let etc = getCurentData.data.RAW.ETC.USD;\n        \n        // My personal total Assets\n        let totalAssets = Math.floor(btc.PRICE * 0.08309080);\n    \n\n        // Add our icons as a new property to each coin object that was created\n        btc.iconImage = BTC;\n        eth.iconImage = ETH;\n        xrp.iconImage = XRP;\n        bch.iconImage = BCH;\n        xlm.iconImage = XLM;\n        etc.iconImage = ETC;\n\n        // Pushing/updating the new coin objects to the currentCoinsData we declared in line 29\n        currentCoinsData.push(btc, eth, xrp, bch, xlm, etc);\n        setCurrentPrices(currentCoinsData);\n        // console.log(currentCoinsData);\n        setAssets(totalAssets);\n        setIsLoading(false);       \n    }\n\n    return ( \n        <div className=\"container\">\n            {isLoading ? (\n                <div >\n                    <div id='loader'></div> \n                        <h4>Loading...</h4>\n                     </div>\n                ) : (\n                    <CryptoCard coins={currentPrices} />   \n            )}\n            <div className=\"assets\">\n                <p>Total Assets: ${assets}</p>\n            </div>\n            \n        </div>\n    );\n}\n \nexport default CurrentPrices;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            year: new Date()\n         }\n    }\n\n    componentDidMount() {\n        // Edit year function\n        this.timerID = setInterval(() => {\n            this.setState({time: new Date()});\n            // Check year every 24 hours\n        }, 864000);\n    }\n\n\n    render() { \n        return ( \n            <div className=\"fixed-bottom\">\n                <p className=\"small\">All rights reserved &copy; {this.state.year.getFullYear()} | Eliram Malachi</p>\n            </div>\n         );\n    }\n}\n \nexport default Footer;","import React, { useState } from 'react';\n\nimport './SearchBar.css';\n\nconst SearchBar = ({ searchCoin }) => {\n    const [searchInput, setSearchInput] = useState(\"Enter full coin's name\");\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        setSearchInput(evt.target.reset());\n        searchCoin(searchInput);\n    }\n\n    return ( \n        <div className=\"search container\">\n            <div className=\"\">\n            <h4 className=\"text-light lead\">Search more coins</h4>\n                <form onSubmit={evt => handleSubmit(evt)}>\n                    <div className=\"form-row align-items-center px-4 py-2\">\n                        <div className=\"col\">\n                            <input type=\"text\" \n                                   className=\"form-control mb-2\" \n                                   id=\"inlineFormInput\" \n                                   name=\"searchInput\"\n                                   placeholder={searchInput} \n                                   onChange={evt => setSearchInput(evt.target.value.toLowerCase())}\n                                   required\n                            />\n                        </div>\n                        {/* Button */}\n                        <div className=\"col-auto\">\n                            <button type=\"submit\" className=\"btn btn-outline-warning mb-2\">\n                                <i class=\"fas fa-search\"></i>\n                            </button>\n                        </div>\n                    </div>\n                    {/* <div className=\"secondInput\">\n                        <div className=\"secondSearch active\">\n                            <input type=\"text\" className=\"input\" placeholder=\"SEEEEarch\"/>\n                            <button className=\"btn\">\n                                <i className=\"fas fa-search\"></i>\n                            </button>\n                        </div>\n                    </div> */}\n                </form>\n            </div>            \n        </div>\n    );\n}\n \nexport default SearchBar;","import React, { useState, useEffect } from 'react';\n\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport './SearchResult.css';\n\nconst SearchResult = () => {\n    const [coin, setCoin] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [firstLanding, setFirstLanding] = useState(true);\n    const [notFound, setNotFound] = useState('');\n    const [searchHistory, setSearchHistory] = useState([]); // --> my next step for serach results box\n    \n    useEffect(() => {\n        //searchCoin();\n    }, [])\n\n    const searchCoin = async (searchInput) => {\n        // const coinResult = [];\n        // const API_KEY = '5f1669f9639c90e3b179bbd4e9569d83195316fd3252fdf9a54b0604120f1d1e'\n        // var URL = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${searchInput}&tsyms=USD&api_key={${API_KEY}}`;\n        setNotFound('');\n        setCoin('');\n        setIsLoading(true)\n        URL = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${searchInput}&order=market_cap_desc&per_page=7000&page=1&sparkline=false`;\n        const getSearchedCoin = await axios.get(URL);\n        let results = await getSearchedCoin.data;\n        console.log(results);\n            if (results == 0) {\n                setNotFound('Coin was not found 🙁');\n            }\n\n            else {\n                for(let index in results) {\n                    let coin = results[index];\n                    // searchHistory.push(coin);\n                    setCoin(coin);\n                    setIsLoading(false);\n                    // console.log(coin)\n                }\n                // console.log(searchHistory);\n            }\n    }\n    \n    return ( \n        <div className=\"searchResult\">\n            <SearchBar searchCoin={searchCoin} />\n                <div className=\"container\">\n                {/* In case the coin was not found */}\n                <h4>{notFound}</h4>\n\n                {isLoading ? (\n                    <div>\n                        <p></p>\n                    </div>\n                    ) : (\n                        <div className=\"box_result\">\n                            <h4 className=\"lead p-2\">\n                                <img src={coin.image} alt=\"coin-icon\" className=\"mr-1\" />\n                                {` ${coin.name} - ${coin.symbol.toUpperCase()} - $${coin.current_price.toFixed(2)}`}\n                            </h4>\n                        </div>\n                    )\n                }\n                </div>\n        </div>\n    );\n}\n \nexport default SearchResult;","import React from 'react';\n\nimport './App.css';\n\nimport CryptoPrices from './components/CryptoPrices';\nimport Footer from './components/Footer';\n//import SearchBar from './components/SearchBar';\nimport SearchResult from './components/SearchResult';\n\n\nconst App = () => {\n    return (  \n        <div className=\"App text-light\">\n            <h1 className=\"display-3 pt-2\">Crypto Tracker</h1>\n            <CryptoPrices />\n            <SearchResult />\n            <Footer />\n        </div>\n    );\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}